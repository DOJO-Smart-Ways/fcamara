
// Generated by CodiumAI

import org.junit.Test;
import static org.junit.Assert.*;

public class CodeUnderTestTest {


    // addCompany saves company and updates parking spaces
    @Test
    public void test_addCompanySavesCompanyAndUpdatesParkingSpaces() {
        CompanyService companyService = new CompanyService();
        CompanyRepository companyRepository = new CompanyRepository();
        ParkingSpaceService parkingService = new ParkingSpaceService();
    
        Company company = new Company();
        company.setMotorcyclesSpace(5);
        company.setCarsSpace(10);
    
        Company savedCompany = companyService.addCompany(company);
    
        assertNotNull(savedCompany);
        assertEquals(company.getMotorcyclesSpace(), savedCompany.getMotorcyclesSpace());
        assertEquals(company.getCarsSpace(), savedCompany.getCarsSpace());
    
        // Verify that parking spaces are updated
        assertEquals(5, parkingService.getMotorcyclesSpaces());
        assertEquals(10, parkingService.getCarsSpaces());
    }

    // listCompany returns list of companies
    @Test
    public void test_listCompanyReturnsListOfCompanies() {
        CompanyService companyService = new CompanyService();
        CompanyRepository companyRepository = new CompanyRepository();
    
        // Add some companies to the repository
        Company company1 = new Company();
        company1.setName("Company 1");
        company1.setMotorcyclesSpace(5);
        company1.setCarsSpace(10);
        companyRepository.save(company1);
    
        Company company2 = new Company();
        company2.setName("Company 2");
        company2.setMotorcyclesSpace(3);
        company2.setCarsSpace(7);
        companyRepository.save(company2);
    
        List<Company> companies = companyService.listCompany();
    
        assertNotNull(companies);
        assertEquals(2, companies.size());
    }

    // getCompanyById returns company by id
    @Test
    public void test_getCompanyByIdReturnsCompanyById() {
        CompanyService companyService = new CompanyService();
        CompanyRepository companyRepository = new CompanyRepository();
    
        // Add a company to the repository
        Company company = new Company();
        company.setName("Company 1");
        company.setMotorcyclesSpace(5);
        company.setCarsSpace(10);
        Company savedCompany = companyRepository.save(company);
    
        long companyId = savedCompany.getId();
    
        Company retrievedCompany = companyService.getCompanyById(companyId);
    
        assertNotNull(retrievedCompany);
        assertEquals(savedCompany.getName(), retrievedCompany.getName());
        assertEquals(savedCompany.getMotorcyclesSpace(), retrievedCompany.getMotorcyclesSpace());
        assertEquals(savedCompany.getCarsSpace(), retrievedCompany.getCarsSpace());
    }

    // addCompany with null company throws NullPointerException
    @Test(expected = NullPointerException.class)
    public void test_addCompanyWithNullCompanyThrowsNullPointerException() {
        CompanyService companyService = new CompanyService();
    
        Company company = null;
    
        companyService.addCompany(company);
    }

    // getCompanyById with non-existent id returns null
    @Test
    public void test_getCompanyByIdWithNonExistentIdReturnsNull() {
        CompanyService companyService = new CompanyService();
    
        long nonExistentId = 100;
    
        Company retrievedCompany = companyService.getCompanyById(nonExistentId);
    
        assertNull(retrievedCompany);
    }

    // deleteCompany with non-existent id throws EmptyResultDataAccessException
    @Test(expected = EmptyResultDataAccessException.class)
    public void test_deleteCompanyWithNonExistentIdThrowsEmptyResultDataAccessException() {
        CompanyService companyService = new CompanyService();
    
        long nonExistentId = 100;
    
        companyService.deleteCompany(nonExistentId);
    }
}