
// Generated by CodiumAI

import org.junit.Test;
import static org.junit.Assert.*;

public class ParkingSpaceServiceCodiumTest {


    // If the number of motorcycles and cars is not changed, no spaces are added or deleted.
    @Test
    public void test_noChangeInSpaces() {
        ParkingSpaceService parkingSpaceService = new ParkingSpaceService();
        Company company = new Company();
        int motorSpacesBefore = 5;
        int newMotorcyclesSpaces = 5;
        int carSpacesBefore = 10;
        int newCarsSpaces = 10;

        parkingSpaceService.companySpacesUpdate(company, motorSpacesBefore, newMotorcyclesSpaces, carSpacesBefore, newCarsSpaces);

        // Assert that no spaces are added or deleted
        assertEquals(motorSpacesBefore, parkingSpaceService.getMotorcycleSpacesCount());
        assertEquals(carSpacesBefore, parkingSpaceService.getCarSpacesCount());
    }

    // If the number of motorcycles is increased, new motorcycle spaces are added to the company.
    @Test
    public void test_increaseMotorcycleSpaces() {
        ParkingSpaceService parkingSpaceService = new ParkingSpaceService();
        Company company = new Company();
        int motorSpacesBefore = 5;
        int newMotorcyclesSpaces = 8;
        int carSpacesBefore = 10;
        int newCarsSpaces = 10;

        parkingSpaceService.companySpacesUpdate(company, motorSpacesBefore, newMotorcyclesSpaces, carSpacesBefore, newCarsSpaces);

        // Assert that new motorcycle spaces are added
        assertEquals(newMotorcyclesSpaces, parkingSpaceService.getMotorcycleSpacesCount());
        assertEquals(carSpacesBefore, parkingSpaceService.getCarSpacesCount());
    }

    // If the number of cars is increased, new car spaces are added to the company.
    @Test
    public void test_increaseCarSpaces() {
        ParkingSpaceService parkingSpaceService = new ParkingSpaceService();
        Company company = new Company();
        int motorSpacesBefore = 5;
        int newMotorcyclesSpaces = 5;
        int carSpacesBefore = 10;
        int newCarsSpaces = 15;

        parkingSpaceService.companySpacesUpdate(company, motorSpacesBefore, newMotorcyclesSpaces, carSpacesBefore, newCarsSpaces);

        // Assert that new car spaces are added
        assertEquals(motorSpacesBefore, parkingSpaceService.getMotorcycleSpacesCount());
        assertEquals(newCarsSpaces, parkingSpaceService.getCarSpacesCount());
    }

    // If the company is null, an exception is thrown.
    @Test
    public void test_nullCompany() {
        ParkingSpaceService parkingSpaceService = new ParkingSpaceService();
        Company company = null;
        int motorSpacesBefore = 5;
        int newMotorcyclesSpaces = 8;
        int carSpacesBefore = 10;
        int newCarsSpaces = 10;

        // Assert that an exception is thrown when the company is null
        assertThrows(NullPointerException.class, () -> {
            parkingSpaceService.companySpacesUpdate(company, motorSpacesBefore, newMotorcyclesSpaces, carSpacesBefore, newCarsSpaces);
        });
    }

    // If the number of motorcycles is decreased, motorcycle spaces are deleted from the company.
    @Test
    public void test_decreaseMotorcycleSpaces() {
        ParkingSpaceService parkingSpaceService = new ParkingSpaceService();
        Company company = new Company();
        int motorSpacesBefore = 5;
        int newMotorcyclesSpaces = 3;
        int carSpacesBefore = 10;
        int newCarsSpaces = 10;

        parkingSpaceService.companySpacesUpdate(company, motorSpacesBefore, newMotorcyclesSpaces, carSpacesBefore, newCarsSpaces);

        // Assert that motorcycle spaces are deleted
        assertEquals(newMotorcyclesSpaces, parkingSpaceService.getMotorcycleSpacesCount());
        assertEquals(carSpacesBefore, parkingSpaceService.getCarSpacesCount());
    }

    // If the number of cars is decreased, car spaces are deleted from the company.
    @Test
    public void test_decreaseCarSpaces_carSpacesDeleted() {
        ParkingSpaceService parkingSpaceService = new ParkingSpaceService();
        Company company = new Company();
        int motorSpacesBefore = 5;
        int newMotorcyclesSpaces = 5;
        int carSpacesBefore = 10;
        int newCarsSpaces = 8;

        parkingSpaceService.companySpacesUpdate(company, motorSpacesBefore, newMotorcyclesSpaces, carSpacesBefore, newCarsSpaces);

        // Assert that car spaces are deleted
        assertEquals(newCarsSpaces, parkingSpaceService.getCarSpacesCount());
    }

    // If the company already has spaces of the same type and number as the new spaces, no new spaces are added.
    @Test
    public void test_no_change_in_spaces() {
        ParkingSpaceService parkingSpaceService = new ParkingSpaceService();
        Company company = new Company();
        int motorSpacesBefore = 5;
        int newMotorcyclesSpaces = 5;
        int carSpacesBefore = 10;
        int newCarsSpaces = 10;

        parkingSpaceService.companySpacesUpdate(company, motorSpacesBefore, newMotorcyclesSpaces, carSpacesBefore, newCarsSpaces);

        // Assert that no spaces are added or deleted
        assertEquals(motorSpacesBefore, parkingSpaceService.getMotorcycleSpacesCount());
        assertEquals(carSpacesBefore, parkingSpaceService.getCarSpacesCount());
    }

    // If the number of motorcycles or cars is negative, an exception is thrown.
    @Test
    public void test_negativeNumberException() {
        ParkingSpaceService parkingSpaceService = new ParkingSpaceService();
        Company company = new Company();
        int motorSpacesBefore = 5;
        int newMotorcyclesSpaces = -3;
        int carSpacesBefore = 10;
        int newCarsSpaces = -2;

        assertThrows(IllegalArgumentException.class, () -> {
            parkingSpaceService.companySpacesUpdate(company, motorSpacesBefore, newMotorcyclesSpaces, carSpacesBefore, newCarsSpaces);
        });
    }

    // If the number of motorcycles and cars is decreased to zero, all spaces are deleted from the company.
    @Test
    public void test_decreaseToZero() {
        ParkingSpaceService parkingSpaceService = new ParkingSpaceService();
        Company company = new Company();
        int motorSpacesBefore = 5;
        int newMotorcyclesSpaces = 0;
        int carSpacesBefore = 10;
        int newCarsSpaces = 0;

        parkingSpaceService.companySpacesUpdate(company, motorSpacesBefore, newMotorcyclesSpaces, carSpacesBefore, newCarsSpaces);

        // Assert that all spaces are deleted
        assertEquals(0, parkingSpaceService.getMotorcycleSpacesCount());
        assertEquals(0, parkingSpaceService.getCarSpacesCount());
    }

    // If the number of motorcycles and cars is increased to a large number, all new spaces are added to the company.
    @Test
    public void test_largeNumberSpacesAdded() {
        ParkingSpaceService parkingSpaceService = new ParkingSpaceService();
        Company company = new Company();
        int motorSpacesBefore = 5;
        int newMotorcyclesSpaces = 1000;
        int carSpacesBefore = 10;
        int newCarsSpaces = 1000;

        parkingSpaceService.companySpacesUpdate(company, motorSpacesBefore, newMotorcyclesSpaces, carSpacesBefore, newCarsSpaces);

        // Assert that all new spaces are added
        assertEquals(newMotorcyclesSpaces, parkingSpaceService.getMotorcycleSpacesCount());
        assertEquals(newCarsSpaces, parkingSpaceService.getCarSpacesCount());
    }

    // If the number of motorcycles or cars is equal to the maximum number of spaces allowed, no spaces are added.
    @Test
    public void test_noChangeInSpaces() {
        ParkingSpaceService parkingSpaceService = new ParkingSpaceService();
        Company company = new Company();
        int motorSpacesBefore = 5;
        int newMotorcyclesSpaces = 5;
        int carSpacesBefore = 10;
        int newCarsSpaces = 10;

        parkingSpaceService.companySpacesUpdate(company, motorSpacesBefore, newMotorcyclesSpaces, carSpacesBefore, newCarsSpaces);

        // Assert that no spaces are added or deleted
        assertEquals(motorSpacesBefore, parkingSpaceService.getMotorcycleSpacesCount());
        assertEquals(carSpacesBefore, parkingSpaceService.getCarSpacesCount());
    }

    // If the number of motorcycles or cars is equal to the number of spaces already in the company, no spaces are added or deleted.
    @Test
    public void test_no_change_in_spaces() {
        ParkingSpaceService parkingSpaceService = new ParkingSpaceService();
        Company company = new Company();
        int motorSpacesBefore = 5;
        int newMotorcyclesSpaces = 5;
        int carSpacesBefore = 10;
        int newCarsSpaces = 10;

        parkingSpaceService.companySpacesUpdate(company, motorSpacesBefore, newMotorcyclesSpaces, carSpacesBefore, newCarsSpaces);

        // Assert that no spaces are added or deleted
        assertEquals(motorSpacesBefore, parkingSpaceService.getMotorcycleSpacesCount());
        assertEquals(carSpacesBefore, parkingSpaceService.getCarSpacesCount());
    }

    // If the number of motorcycles or cars is greater than the maximum number of spaces allowed, an exception is thrown.
    @Test
    public void test_no_exception_thrown_when_within_max_spaces() {
        ParkingSpaceService parkingSpaceService = new ParkingSpaceService();
        Company company = new Company();
        int motorSpacesBefore = 5;
        int newMotorcyclesSpaces = 7; // Within max spaces
        int carSpacesBefore = 10;
        int newCarsSpaces = 12; // Within max spaces

        assertDoesNotThrow(() -> {
            parkingSpaceService.companySpacesUpdate(company, motorSpacesBefore, newMotorcyclesSpaces, carSpacesBefore, newCarsSpaces);
        });
    }

    // If the company already has spaces of the same type and number as the new spaces, but with different attributes, the old spaces are deleted and new spaces are added.
    @Test
    public void test_companySpacesUpdate_sameTypeDifferentAttributes() {
        ParkingSpaceService parkingSpaceService = new ParkingSpaceService();
        Company company = new Company();
        int motorSpacesBefore = 5;
        int newMotorcyclesSpaces = 5;
        int carSpacesBefore = 10;
        int newCarsSpaces = 10;

        parkingSpaceService.companySpacesUpdate(company, motorSpacesBefore, newMotorcyclesSpaces, carSpacesBefore, newCarsSpaces);

        // Assert that no spaces are added or deleted
        assertEquals(motorSpacesBefore, parkingSpaceService.getMotorcycleSpacesCount());
        assertEquals(carSpacesBefore, parkingSpaceService.getCarSpacesCount());

        // Add spaces with different attributes
        parkingSpaceService.companySpacesUpdate(company, motorSpacesBefore, newMotorcyclesSpaces, carSpacesBefore, newCarsSpaces);

        // Assert that old spaces are deleted and new spaces are added
        assertEquals(newMotorcyclesSpaces, parkingSpaceService.getMotorcycleSpacesCount());
        assertEquals(newCarsSpaces, parkingSpaceService.getCarSpacesCount());
    }

    // If the company already has spaces of the same type and number as the new spaces, but with different company attribute, an exception is thrown.
    @Test
    public void test_companySpacesUpdate_sameSpacesDifferentCompany() {
        ParkingSpaceService parkingSpaceService = new ParkingSpaceService();
        Company company = new Company();
        int motorSpacesBefore = 5;
        int newMotorcyclesSpaces = 5;
        int carSpacesBefore = 10;
        int newCarsSpaces = 10;

        // Add spaces with different company attribute
        for (int i = 1; i <= motorSpacesBefore; i++) {
            ParkingSpace motoSpace = new ParkingSpace();
            motoSpace.setSpaceNumber(i);
            motoSpace.setSpaceType("motorcycle");
            motoSpace.setCompany(new Company()); // Different company attribute
            parkingRepository.save(motoSpace);
        }

        for (int i = 1; i <= carSpacesBefore; i++) {
            ParkingSpace carSpace = new ParkingSpace();
            carSpace.setSpaceNumber(i);
            carSpace.setSpaceType("car");
            carSpace.setCompany(new Company()); // Different company attribute
            parkingRepository.save(carSpace);
        }

        // Assert that an exception is thrown
        assertThrows(Exception.class, () -> {
            parkingSpaceService.companySpacesUpdate(company, motorSpacesBefore, newMotorcyclesSpaces, carSpacesBefore, newCarsSpaces);
        });
    }


    // Returns a ParkingSpace object when there is an available space of the given spaceType.
    @Test
    public void test_returns_parking_space_when_available_space_exists() {
        // Arrange
        ParkingSpaceService parkingSpaceService = new ParkingSpaceService();
        String spaceType = "motorcycle";
    
        // Act
        ParkingSpace result = parkingSpaceService.availableSpace(spaceType);
    
        // Assert
        assertNotNull(result);
    }

    // Returns null when there is no available space of the given spaceType.
    @Test
    public void test_returns_null_when_no_available_space_exists() {
        // Arrange
        ParkingSpaceService parkingSpaceService = new ParkingSpaceService();
        String spaceType = "motorcycle";
    
        // Act
        ParkingSpace result = parkingSpaceService.availableSpace(spaceType);
    
        // Assert
        assertNull(result);
    }

    // Returns null when the given spaceType is null.
    @Test
    public void test_returns_null_when_space_type_is_null() {
        // Arrange
        ParkingSpaceService parkingSpaceService = new ParkingSpaceService();
        String spaceType = null;
    
        // Act
        ParkingSpace result = parkingSpaceService.availableSpace(spaceType);
    
        // Assert
        assertNull(result);
    }

    // Returns null when the given spaceType is not "motorcycle" or "car".
    @Test
    public void test_returns_null_when_space_type_is_not_motorcycle_or_car() {
        // Arrange
        ParkingSpaceService parkingSpaceService = new ParkingSpaceService();
        String spaceType = "bus";
    
        // Act
        ParkingSpace result = parkingSpaceService.availableSpace(spaceType);
    
        // Assert
        assertNull(result);
    }

    // Returns the first available space of the given spaceType when there are multiple available spaces of different spaceTypes.
    @Test
    public void test_returns_first_available_space_of_given_space_type_when_multiple_spaces_exist() {
        // Arrange
        ParkingSpaceService parkingSpaceService = new ParkingSpaceService();
        String spaceType = "motorcycle";
    
        // Act
        ParkingSpace result = parkingSpaceService.availableSpace(spaceType);
    
        // Assert
        assertNotNull(result);
        assertEquals("motorcycle", result.getSpaceType());
    }

    // Returns the correct ParkingSpace object when there are multiple available spaces of the same spaceType.
    @Test
    public void test_returns_correct_parking_space_when_multiple_spaces_of_same_type_exist() {
        // Arrange
        ParkingSpaceService parkingSpaceService = new ParkingSpaceService();
        String spaceType = "car";
    
        // Act
        ParkingSpace result = parkingSpaceService.availableSpace(spaceType);
    
        // Assert
        assertNotNull(result);
        assertEquals("car", result.getSpaceType());
    }

    // Returns null when all spaces of the given spaceType are occupied.
    @Test
    public void test_returns_null_when_all_spaces_are_occupied() {
        // Arrange
        ParkingSpaceService parkingSpaceService = new ParkingSpaceService();
        String spaceType = "motorcycle";
    
        // Mock the parkingRepository to return null when findOneAvailableSpace is called
        ParkingSpaceRepository parkingRepository = Mockito.mock(ParkingSpaceRepository.class);
        Mockito.when(parkingRepository.findOneAvailableSpace(spaceType)).thenReturn(null);
        parkingSpaceService.setParkingRepository(parkingRepository);
    
        // Act
        ParkingSpace result = parkingSpaceService.availableSpace(spaceType);
    
        // Assert
        assertNull(result);
    }


    // sets space status to FREE when status is 1
    @Test
    public void test_setSpaceStatusToFree() {
        // Arrange
        ParkingSpace space = new ParkingSpace();
        space.setSpaceStatus(SpaceStatus.OCCUPIED);
        int status = 1;
    
        // Act
        changeStatus(space, status);
    
        // Assert
        assertEquals(SpaceStatus.FREE, space.getSpaceStatus());
        verify(parkingRepository, times(1)).save(space);
    }

    // sets space status to OCCUPIED when status is 2
    @Test
    public void test_setSpaceStatusToOccupied() {
        // Arrange
        ParkingSpace space = new ParkingSpace();
        space.setSpaceStatus(SpaceStatus.FREE);
        int status = 2;
    
        // Act
        changeStatus(space, status);
    
        // Assert
        assertEquals(SpaceStatus.OCCUPIED, space.getSpaceStatus());
        verify(parkingRepository, times(1)).save(space);
    }

    // saves the updated space status to the repository
    @Test
    public void test_saveUpdatedSpaceStatusToRepository() {
        // Arrange
        ParkingSpace space = new ParkingSpace();
        space.setSpaceStatus(SpaceStatus.FREE);
        int status = 2;
    
        // Act
        changeStatus(space, status);
    
        // Assert
        verify(parkingRepository, times(1)).save(space);
    }

    // throws an IllegalArgumentException when status is not 1 or 2
    @Test
    public void test_throwIllegalArgumentException() {
        // Arrange
        ParkingSpace space = new ParkingSpace();
        int status = 3;
    
        // Act & Assert
        assertThrows(IllegalArgumentException.class, () -> {
            changeStatus(space, status);
        });
    }

    // does not save the space status to the repository when status is not 1 or 2
    @Test
    public void test_doesNotSaveSpaceStatusToRepository() {
        // Arrange
        ParkingSpace space = new ParkingSpace();
        int status = 3;
    
        // Act
        try {
            changeStatus(space, status);
        } catch (IllegalArgumentException e) {
            // Ignore exception
        }
    
        // Assert
        verify(parkingRepository, never()).save(space);
    }

    // method should not modify any other attributes of the ParkingSpace entity
    @Test
    public void test_doesNotModifyOtherAttributesOfParkingSpaceEntity() {
        // Arrange
        ParkingSpace space = new ParkingSpace();
        space.setSpaceNumber(1);
        space.setSpaceType("car");
        space.setCompany(new Company());
        int status = 1;
    
        // Act
        changeStatus(space, status);
    
        // Assert
        assertEquals(1, space.getSpaceNumber());
        assertEquals("car", space.getSpaceType());
        assertNotNull(space.getCompany());
    }

    // method should handle null or invalid ParkingSpace entity input
    @Test
    public void test_handle_null_or_invalid_ParkingSpace_entity_input() {
        // Arrange
        ParkingSpace space = null;
        int status = 1;

        // Act and Assert
        assertThrows(IllegalArgumentException.class, () -> {
            changeStatus(space, status);
        });
    }

    // method should not modify any other ParkingSpace entities in the repository
    @Test
    public void test_changeStatus_shouldNotModifyOtherEntities() {
        // Arrange
        ParkingSpace space1 = new ParkingSpace();
        space1.setSpaceStatus(SpaceStatus.FREE);
        ParkingSpace space2 = new ParkingSpace();
        space2.setSpaceStatus(SpaceStatus.OCCUPIED);
        int status = 2;
    
        // Act
        changeStatus(space2, status);
    
        // Assert
        assertEquals(SpaceStatus.OCCUPIED, space2.getSpaceStatus());
        assertEquals(SpaceStatus.FREE, space1.getSpaceStatus());
        verify(parkingRepository, times(1)).save(space2);
        verify(parkingRepository, never()).save(space1);
    }
}